#!/usr/bin/perl
#
use strict;
use File::Basename;
use File::Copy qw(move);
use Getopt::Long qw(:config no_ignore_case);

## Global variables:
my $help = 0;
my $debug = 0;
my $remove = 0;
my $force = 0;
my $fail = 0;
my $quiet = 0;
my $create = 0;
my $blackhole = 0;
my $domains_dir;
my $domains_bckdir;
my $configfile = '/etc/default/vmailfwd';

## Some function prototypes:
sub abort(@);
sub vdom_read($;$);
sub vdom_save($;$$);
sub vdom_init($;$);
sub vdom_delete($$);
sub vdom_add($$$);
sub emailparse($);

## Get command line options: 1st pass to select config file.
Getopt::Long::Configure('pass_through');
GetOptions ("c|config=s"	=>	\$configfile,
            "d|debug+"		=>	\$debug) || Usage();

## Read configuration file
read_conf($configfile);

## Get command line options: 2nd pass to update config params.
Getopt::Long::Configure('no_pass_through');
if ( basename($0) =~ /^del/ ) {
    $remove = 1;
    GetOptions (
        "f|force"	=>	\$force,
        "q|quiet"	=>	\$quiet,
        "h|help"	=>	\$help ) || Usage();
} else {
    $remove = 0;
    GetOptions (
        "i|create"	=>	\$create,
        "s|remove"	=>	\$remove,
        "r|reject"	=>	\$fail,
        "x|drop"	=>	\$blackhole,
        "f|force"	=>	\$force,
        "q|quiet"	=>	\$quiet,
        "h|help"	=>	\$help ) || Usage();
}
Usage() unless $ARGV[0];
Usage() if $help;

## Get recipient description:
my ($localpart_rcpt,$domain_rcpt) = emailparse($ARGV[0]);

print "Recipient:   local-part= $localpart_rcpt, domain= $domain_rcpt\n"
    if $debug;

## Read recipient virtual domain file:
my $vdom = vdom_read($domain_rcpt, $domains_dir);
$vdom = vdom_init($domain_rcpt, $domains_dir) if $create && !$vdom;
abort "Virtual domain not found $domain_rcpt: $!\n" unless $vdom;

## Delete entry:
vdom_delete($vdom, $localpart_rcpt) if $remove;

## Add entry:
vdom_add($vdom, $localpart_rcpt, $ARGV[1]) unless $remove;

## Save modified domain: 
vdom_save($vdom, $domains_dir, $domains_bckdir) or
    abort "Virtual domain not saved $domain_rcpt: $!\n";

## Dump created file, if required.
vdom_dump($domain_rcpt, $domains_dir) if $debug > 1;

## That's all folks
exit(0);

## Display formatted usage:
sub Usage {
    my $progname = basename($0);
    my $destarg = "{<destination>|<text> ...}";
    $destarg = '' if $progname =~ /^del/;
    print <<EOF
Usage: $progname {options} <recipient> $destarg
Options:
   -h, --help         Print this help.
   -c, --config FILE  Select configuration file.
                      (default: $configfile)
   -q, --quiet        Disable verbose messages.
   -d, --debug        Enable or increase debug level.
EOF
;
    exit(0) if $progname =~ /^del/;
    print <<EOF
   -i, --create       Create virtual domain file, if required.
   -f, --force        Force operation, replace existing recipient.
   -s, --remove       Suppress/remove existing recipient.
   -r, --reject       Reject/bounce recipient with <text> message.
                      (default text: Unknown user <rcpt>)
   -x, --drop         Silently drop recipient mails.
EOF
;
    exit(0);
}

## Parse email, return local-part and domain (default to 'localhost'
## if not present)
sub emailparse ($) {
    my $fullemail = shift;
    my ($localpart,$domain,$dummy) = split('@', $fullemail);
    return undef if $dummy;
    $domain = 'localhost' unless $domain;
    return ($localpart,$domain);
}

## Read Virtual Domain file.
sub vdom_read ($;$) {
    my $domain = shift;
    my $dirname = shift;
    my $filename = $domain;
    $filename = join('/', $dirname, $filename) if $dirname;
    return undef unless -f $filename;
    my @lines;
    my %rcpts;
    my $pos = 0;
    open (my $fh, $filename) ||
        die "Cannot open file $filename: $!\n";
    while(<$fh>) {
        s/[\r\n]*$//;	# Remove trailing CR-LF
        if (/^#/ || /^;/ || /^$/) {
            push @lines, $_;
        } else {
            my ($rcpt,@dest) = split(':', $_);
            push @dest, '' if $#dest > 0;
            $rcpt =~ s/[\s]*//g;
            $dest[0] =~ s/[\s]*//g;
            push @lines, sprintf("[%s]", $rcpt);
            $rcpts{$rcpt} = join(':', @dest);
            $pos = $#lines unless $rcpt eq '*';
        }
    }
    close($fh);
    return {name => $domain, raw => \@lines,
            map => \%rcpts, insert => 1+$pos };
}

## Initialize Virtual Domain.
sub vdom_init ($;$) {
    my $domain = shift;
    my $dirname = shift;
    my @lines;
    push @lines, "## Virtual domain file : $domain";
    return {name => $domain, raw => \@lines,
            map => {}, insert => 1 };
}

## Save Virtual Domain to file.
sub	vdom_save($;$$) {
    my $vdom = shift;
    my $dirname = shift;
    my $dirbckp = shift;
    my $filename = $vdom->{name};
    $filename = join('/', $dirname, $filename) if $dirname;
    if ($dirbckp && -f $filename) {
        my $bckpname = join('/', $dirbckp, join('.', $vdom->{name}, 'bck'));
        move($filename, $bckpname) ||
            warn "Cannot create backup $bckpname: $!\n";
    }
    open (my $fh, ">$filename") || return;
    foreach my $line ( @{$vdom->{raw}} ) {
        printf($fh "%s\n", $line) unless $line =~ /^\[/;
        next unless $line =~ /^\[/;
        my @rcpt = split('[\[\]]', $line);
        next unless $vdom->{map}->{$rcpt[1]};
        printf($fh "%s : %s\n", $rcpt[1], $vdom->{map}->{$rcpt[1]});
    }
    close($fh);
    return $vdom;
}

## Add or update recipient.
sub vdom_add ($$$) {
    my $vdom = shift;
    my $rcpt = shift;
    my $dest = shift;

    abort "Missing recipient" unless $dest;

    my ($localpart_dest,$domain_dest) = emailparse($dest);

    print "Destination: local-part= $localpart_dest, domain= $domain_dest\n"
        if $debug;

    unless ($force) {
        abort "Recipient already exists: $rcpt\@$vdom->{name}" if
            $vdom->{map}->{$rcpt};
    }

    # Skip recipient and destination arguments.
    shift @ARGV;
    shift @ARGV unless $fail;	# Destination is not present, rather fail text.

    # Prepare destination description
    $dest = undef;
    $dest = ":blackhole:" if $blackhole;
    if ($fail) {
        $dest = ":fail:" if $fail;
        $dest .= join(' ', ' ', @ARGV) if $ARGV[0];
        $dest .= sprintf("Unknown user: %s", $localpart_rcpt) unless $ARGV[0];
    }
    $dest = join('@', $localpart_dest, $domain_dest) unless $dest;

    printf("Recipient updated: %s\n",
           join('@', $rcpt, $vdom->{name} ))
        if $vdom->{map}->{$rcpt} && !$quiet;

    printf("Recipient added: %s\n",
           join('@', $rcpt, $vdom->{name} ))
        unless $vdom->{map}->{$rcpt} || $quiet;

    # Add entry to the 'file', if not already present.
    unless ($vdom->{map}->{$rcpt}) {
        splice @{$vdom->{raw}}, $vdom->{insert}, 0, sprintf("[%s]", $rcpt);
    }

    # Update map entry
    $vdom->{map}->{$rcpt} = $dest;
}

## Delete recipient from virtual domain.
sub vdom_delete ($$) {
    my $vdom = shift;
    my $rcpt = shift;
    my $domain = $vdom->{name};

    abort "Recipient not found: $rcpt\@$domain\n"
        unless $vdom->{map}->{$rcpt};
    delete $vdom->{map}->{$rcpt};

    printf("Recipient removed: %s\n",
           join('@', $rcpt, $domain ))
        unless $quiet;
}

## Dump/cat (vdom) file.
sub	vdom_dump ($;$) {
    my $filename = shift;
    my $dirname = shift;
    $filename = join('/', $dirname, $filename) if $dirname;
    return undef unless -f $filename;
    print "\nVirtual domain file: $filename\n";
    open(my $fh, $filename) || return;
    while (<$fh>) { print; }; close($fh);
}

## Read configuration file, eval defined conf variables.
sub read_conf($) {
    my $filename = shift;
    return unless -f $filename;
    open(my $fh, $filename) ||
        die "Cannot open file $filename: $!\n";
    while (<$fh>) {
        next if /^#/ or /^;/ or /^$/;
        next unless /=/;
        s/[\r\n]*$//;
        my ($var,$value) = split('=');
        my $evalstr = sprintf("\$%s='%s'", $var, $value);
        print "eval($evalstr)\n" if $debug > 2;
        eval $evalstr;
    }
    close($fh);
}

## Aborting execution (kind of 'die' substitution)
sub abort(@) {
    print join(' ', @_);
    exit(1);
}

## End Of File: addvmail
